extends layout
block content
  h1(style='display:inline;')= title
  p(style='display:inline;color:darkgray;') Welcome to #{title}

  #ELM
  script(src="/static/js/downscale-canvas.js")
  script(src='/static/js/elm-canvas.js')
  script(src="/static/js/elm.js")
  script.
    const app = Elm.Home.init({
      node: document.getElementById('ELM')
    })

    app.ports.sendValues.subscribe(files=>{
      files = files.reverse()
      oneByOne(files)
    })

    function oneByOne(files){
      const file = files.pop()
      if (file)
        fileToSmallImage(file).then(res=>{ // res : [File, Image, [width : Int, height : Int]]
          app.ports.recvImage.send(res)
          oneByOne(files)
        })
    }

    // File -> Promise [File, Image, [width : Int, height : Int]]
    function fileToSmallImage(file){
      return new Promise((done,fail)=>{
        fileToImage(file).then(image=>{
          const scale = 256 / Math.max(image.width, image.height)
          if (scale >= 1 || scale <= 0) done([file, image, [image.width, image.height]])
          canvasToImage(downScaleCanvas(imageToCanvas(image),scale))
            .then(img=>{ done([file, img, [image.width, image.height]]) }).catch(fail)
        })
      })
    }

    // File -> Promise Image
    function fileToImage(file){
      return new Promise((done,fail)=>{
        const reader = new FileReader()
        reader.readAsDataURL(file) // -> base64
        reader.onerror = fail
        reader.onload = () => {
          loadImage(reader.result)
            .then(done)
            .catch(fail)
        }
      })
    }

    // url -> Promise Image
    function loadImage(src){
      return new Promise((done,fail)=>{
        const image = new Image()
        image.crossOrigin = 'Anonymous'
        image.src = src
        image.onerror = fail
        image.onload = () => done(image)
      })
    }



    // Image -> Canvas
    function imageToCanvas(image){
      const canvas = document.createElement('canvas')
      const context = canvas.getContext("2d")
      canvas.width = image.width
      canvas.height = image.height
      context.drawImage(image, 0, 0)
      return canvas
    }

    // Canvas -> Promise Image
    function canvasToImage(canvas){
      return new Promise((done,fail)=>{
        const image = new Image()
        image.crossOrigin = 'Anonymous'
        image.src = canvas.toDataURL()
        image.onerror = fail
        image.onload = () => done(image)
      })
    }




    // dataUrl -> Promise Image
    function urlToSmallImage(url){
      return new Promise((done,fail)=>{
        loadImage(url).then(image=>{
          const scale = 256/Math.max(image.width,image.height)
          if (scale >= 1 || scale <= 0) done(image)
          canvasToImage(downScaleCanvas(imageToCanvas(image),scale))
            .then(img=>{ done(img) })
        })
      })
    }




  #TEST
    input#SELECT(type='file' accept='image/*' multiple style='display:block;')
  script.
    SELECT.addEventListener('change',function(e){
      if (this.files.length==1){
        fileToSmallImage(this.files[0])
          .then(img=>TEST.appendChild(img))
      } else if (this.files.length>0){
        Array.from(this.files).map(file=>{
          fileToSmallImage(file).then(img=>{
            if (img.width>img.height)
              img.style.width = '50px'
            else
              img.style.height = '50px'
            TEST.appendChild(img)
          }).catch(err=>{
            const span = document.createElement('span')
            span.innerText = file.name
            span.style.lineHeight = '50px'
            span.style.color = 'red'
            span.style.fontFamily = 'arial'
            span.style.fontWeight = 'bold'
            span.style.border = '1px solid red'
            TEST.appendChild(span)
          })
        })
      }
      this.value = ""
    })

